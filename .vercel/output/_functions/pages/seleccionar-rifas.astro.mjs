import { c as createComponent, a as createAstro, r as renderTemplate, b as renderComponent, d as renderHead, e as addAttribute } from '../chunks/astro/server_CDjB31Lh.mjs';
import 'kleur/colors';
import { $ as $$HeaderGrisha } from '../chunks/HeaderGrisha_5DuKFRQu.mjs';
/* empty css                                             */
export { renderers } from '../renderers.mjs';

var __freeze = Object.freeze;
var __defProp = Object.defineProperty;
var __template = (cooked, raw) => __freeze(__defProp(cooked, "raw", { value: __freeze(raw || cooked.slice()) }));
var _a;
const $$Astro = createAstro();
const $$SeleccionarRifas = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro, $$props, $$slots);
  Astro2.self = $$SeleccionarRifas;
  const urlParams = new URLSearchParams(Astro2.url.search);
  const email = urlParams.get("email");
  const cantidad = urlParams.get("cantidad");
  const token = urlParams.get("token");
  let validationError = "";
  let successMessage = "";
  if (!email || !cantidad || !token) {
    return Astro2.redirect("/");
  }
  if (isNaN(Number(cantidad)) || Number(cantidad) <= 0 || Number(cantidad) % 2 !== 0) {
    return Astro2.redirect("/");
  }
  return renderTemplate(_a || (_a = __template(['<html lang="en" data-astro-cid-7l3ca6qc> <head><meta charset="utf-8"><link rel="icon" type="image/svg+xml" href="/favicon.svg"><meta name="viewport" content="width=device-width"><meta name="generator"', "><title>Rifa Grisha - Seleccionar Rifas</title>", "</head> <body data-astro-cid-7l3ca6qc> ", " <main data-astro-cid-7l3ca6qc> <h1 data-astro-cid-7l3ca6qc>Selecciona tus N\xFAmeros de Rifa</h1> ", " ", " <p data-astro-cid-7l3ca6qc>\nCorreo: <strong data-astro-cid-7l3ca6qc>", "</strong> <br data-astro-cid-7l3ca6qc>\nDebes seleccionar <strong data-astro-cid-7l3ca6qc>", '</strong> n\xFAmeros\n                de rifa.\n</p> <form method="POST" id="raffle-form" data-astro-cid-7l3ca6qc> <label for="raffleNumbers" data-astro-cid-7l3ca6qc>N\xFAmeros (separados por comas):</label> <input type="text" id="raffleNumbers" name="raffleNumbers" placeholder="Ej: 001, 050, 999" required data-astro-cid-7l3ca6qc> <button type="submit" data-astro-cid-7l3ca6qc>Guardar Selecci\xF3n</button> </form> </main> <script client:load>\n            // Aseg\xFArate de que el script se ejecuta en el cliente\n            // Function to load users from API (similar to admin panel, but not needed here)\n            //   async function loadUsers() {\n            //     try {\n            //       const response = await fetch(\'/api/admin/users\');\n            //       if (!response.ok) {\n            //         throw new Error(`HTTP error! status: ${response.status}`);\n            //       }\n            //       const users = await response.json();\n            //     } catch (error) {\n            //       console.error(\'Error al cargar usuarios:\', error);\n            //     }\n            //   }\n\n            // Function to validate a single raffle number\n            async function checkRaffleNumber(number) {\n                try {\n                    const baseURL = window.location.origin; // Add base URL\n                    const response = await fetch(\n                        `${baseURL}/api/check-raffle-number`,\n                        {\n                            method: "POST",\n                            headers: {\n                                "Content-Type": "application/json",\n                            },\n                            body: JSON.stringify({ raffleNumber: number }),\n                        },\n                    );\n\n                    const data = await response.json();\n                    return data.available;\n                } catch (error) {\n                    console.error("Error checking raffle number:", error);\n                    return false; // Consider the number unavailable on error\n                }\n            }\n\n            // Handle form submission\n            document\n                .getElementById("raffle-form")\n                .addEventListener("submit", async (event) => {\n                    event.preventDefault();\n                    const raffleNumbersInput =\n                        document.getElementById("raffleNumbers");\n                    const enteredNumbers = raffleNumbersInput.value\n                        .split(",")\n                        .map((num) => num.trim())\n                        .filter((num) => num !== "");\n                    const formMessage = document.getElementById("form-message");\n\n                    formMessage.style.display = "none"; // Ocultar mensaje anterior\n                    formMessage.classList.remove("success", "error");\n                    formMessage.textContent = "";\n\n                    if (enteredNumbers.length != Number(cantidad) / 2) {\n                        validationError =\n                            "Debes ingresar la cantidad correcta de n\xFAmeros.";\n                        formMessage.textContent = validationError;\n                        formMessage.classList.add("message", "error");\n                        formMessage.style.display = "block";\n                        return;\n                    }\n                    if (enteredNumbers.length > 0) {\n                        let allValid = true;\n                        for (const raffleNumber of enteredNumbers) {\n                            if (!/^\\d{3}$/.test(raffleNumber)) {\n                                validationError =\n                                    "Los n\xFAmeros de rifa deben ser n\xFAmeros de 3 d\xEDgitos.";\n                                allValid = false;\n                                break;\n                            }\n                            const isAvailable =\n                                await checkRaffleNumber(raffleNumber);\n                            if (!isAvailable) {\n                                validationError = `El n\xFAmero ${raffleNumber} ya est\xE1 asignado.`;\n                                allValid = false;\n                                break;\n                            }\n                        }\n\n                        if (allValid) {\n                            // TODO: Call API route to save the numbers and redirect\n                            successMessage =\n                                "\xA1N\xFAmeros validados! Redirigiendo...";\n                            formMessage.textContent = successMessage;\n                            formMessage.classList.add("message", "success");\n\n                            // Save to local storage for testing\n                            try {\n                                const response = await fetch(\n                                    "/api/save-raffle-numbers",\n                                    {\n                                        method: "POST",\n                                        headers: {\n                                            "Content-Type": "application/json",\n                                        },\n                                        body: JSON.stringify({\n                                            email: email,\n                                            token: token,\n                                            raffleNumbers: enteredNumbers,\n                                            cantidad: cantidad,\n                                        }),\n                                    },\n                                );\n                                const data = await response.json();\n                                console.log(data.message);\n                                if (response.ok) {\n                                    window.location.href =\n                                        "/gracias-por-participar";\n                                }\n                            } catch (error) {\n                                console.error(\n                                    "Error al guardar n\xFAmeros:",\n                                    error,\n                                );\n                                successMessage =\n                                    "Hubo un error al guardar los n\xFAmeros. Intenta de nuevo.";\n                                formMessage.classList.add("message", "error");\n                                formMessage.textContent = successMessage;\n                            }\n                        }\n                        // If validation fails, display the error.\n                        else {\n                            formMessage.textContent = validationError;\n                            formMessage.classList.add("message", "error");\n                        }\n                    } else {\n                        formMessage.textContent =\n                            "Debes ingresar al menos un n\xFAmero de rifa.";\n                        formMessage.classList.add("message", "error");\n                    }\n                    formMessage.style.display = "block";\n                });\n        <\/script> </body> </html>'], ['<html lang="en" data-astro-cid-7l3ca6qc> <head><meta charset="utf-8"><link rel="icon" type="image/svg+xml" href="/favicon.svg"><meta name="viewport" content="width=device-width"><meta name="generator"', "><title>Rifa Grisha - Seleccionar Rifas</title>", "</head> <body data-astro-cid-7l3ca6qc> ", " <main data-astro-cid-7l3ca6qc> <h1 data-astro-cid-7l3ca6qc>Selecciona tus N\xFAmeros de Rifa</h1> ", " ", " <p data-astro-cid-7l3ca6qc>\nCorreo: <strong data-astro-cid-7l3ca6qc>", "</strong> <br data-astro-cid-7l3ca6qc>\nDebes seleccionar <strong data-astro-cid-7l3ca6qc>", '</strong> n\xFAmeros\n                de rifa.\n</p> <form method="POST" id="raffle-form" data-astro-cid-7l3ca6qc> <label for="raffleNumbers" data-astro-cid-7l3ca6qc>N\xFAmeros (separados por comas):</label> <input type="text" id="raffleNumbers" name="raffleNumbers" placeholder="Ej: 001, 050, 999" required data-astro-cid-7l3ca6qc> <button type="submit" data-astro-cid-7l3ca6qc>Guardar Selecci\xF3n</button> </form> </main> <script client:load>\n            // Aseg\xFArate de que el script se ejecuta en el cliente\n            // Function to load users from API (similar to admin panel, but not needed here)\n            //   async function loadUsers() {\n            //     try {\n            //       const response = await fetch(\'/api/admin/users\');\n            //       if (!response.ok) {\n            //         throw new Error(\\`HTTP error! status: \\${response.status}\\`);\n            //       }\n            //       const users = await response.json();\n            //     } catch (error) {\n            //       console.error(\'Error al cargar usuarios:\', error);\n            //     }\n            //   }\n\n            // Function to validate a single raffle number\n            async function checkRaffleNumber(number) {\n                try {\n                    const baseURL = window.location.origin; // Add base URL\n                    const response = await fetch(\n                        \\`\\${baseURL}/api/check-raffle-number\\`,\n                        {\n                            method: "POST",\n                            headers: {\n                                "Content-Type": "application/json",\n                            },\n                            body: JSON.stringify({ raffleNumber: number }),\n                        },\n                    );\n\n                    const data = await response.json();\n                    return data.available;\n                } catch (error) {\n                    console.error("Error checking raffle number:", error);\n                    return false; // Consider the number unavailable on error\n                }\n            }\n\n            // Handle form submission\n            document\n                .getElementById("raffle-form")\n                .addEventListener("submit", async (event) => {\n                    event.preventDefault();\n                    const raffleNumbersInput =\n                        document.getElementById("raffleNumbers");\n                    const enteredNumbers = raffleNumbersInput.value\n                        .split(",")\n                        .map((num) => num.trim())\n                        .filter((num) => num !== "");\n                    const formMessage = document.getElementById("form-message");\n\n                    formMessage.style.display = "none"; // Ocultar mensaje anterior\n                    formMessage.classList.remove("success", "error");\n                    formMessage.textContent = "";\n\n                    if (enteredNumbers.length != Number(cantidad) / 2) {\n                        validationError =\n                            "Debes ingresar la cantidad correcta de n\xFAmeros.";\n                        formMessage.textContent = validationError;\n                        formMessage.classList.add("message", "error");\n                        formMessage.style.display = "block";\n                        return;\n                    }\n                    if (enteredNumbers.length > 0) {\n                        let allValid = true;\n                        for (const raffleNumber of enteredNumbers) {\n                            if (!/^\\\\d{3}$/.test(raffleNumber)) {\n                                validationError =\n                                    "Los n\xFAmeros de rifa deben ser n\xFAmeros de 3 d\xEDgitos.";\n                                allValid = false;\n                                break;\n                            }\n                            const isAvailable =\n                                await checkRaffleNumber(raffleNumber);\n                            if (!isAvailable) {\n                                validationError = \\`El n\xFAmero \\${raffleNumber} ya est\xE1 asignado.\\`;\n                                allValid = false;\n                                break;\n                            }\n                        }\n\n                        if (allValid) {\n                            // TODO: Call API route to save the numbers and redirect\n                            successMessage =\n                                "\xA1N\xFAmeros validados! Redirigiendo...";\n                            formMessage.textContent = successMessage;\n                            formMessage.classList.add("message", "success");\n\n                            // Save to local storage for testing\n                            try {\n                                const response = await fetch(\n                                    "/api/save-raffle-numbers",\n                                    {\n                                        method: "POST",\n                                        headers: {\n                                            "Content-Type": "application/json",\n                                        },\n                                        body: JSON.stringify({\n                                            email: email,\n                                            token: token,\n                                            raffleNumbers: enteredNumbers,\n                                            cantidad: cantidad,\n                                        }),\n                                    },\n                                );\n                                const data = await response.json();\n                                console.log(data.message);\n                                if (response.ok) {\n                                    window.location.href =\n                                        "/gracias-por-participar";\n                                }\n                            } catch (error) {\n                                console.error(\n                                    "Error al guardar n\xFAmeros:",\n                                    error,\n                                );\n                                successMessage =\n                                    "Hubo un error al guardar los n\xFAmeros. Intenta de nuevo.";\n                                formMessage.classList.add("message", "error");\n                                formMessage.textContent = successMessage;\n                            }\n                        }\n                        // If validation fails, display the error.\n                        else {\n                            formMessage.textContent = validationError;\n                            formMessage.classList.add("message", "error");\n                        }\n                    } else {\n                        formMessage.textContent =\n                            "Debes ingresar al menos un n\xFAmero de rifa.";\n                        formMessage.classList.add("message", "error");\n                    }\n                    formMessage.style.display = "block";\n                });\n        <\/script> </body> </html>'])), addAttribute(Astro2.generator, "content"), renderHead(), renderComponent($$result, "HeaderGrisha", $$HeaderGrisha, { "data-astro-cid-7l3ca6qc": true }), validationError, successMessage, email, Number(cantidad) / 2);
}, "/home/jimp/develop/astro/rifa_grisha/src/pages/seleccionar-rifas.astro", void 0);

const $$file = "/home/jimp/develop/astro/rifa_grisha/src/pages/seleccionar-rifas.astro";
const $$url = "/seleccionar-rifas";

const _page = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
    __proto__: null,
    default: $$SeleccionarRifas,
    file: $$file,
    url: $$url
}, Symbol.toStringTag, { value: 'Module' }));

const page = () => _page;

export { page };
