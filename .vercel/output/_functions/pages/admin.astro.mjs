import { c as createComponent, a as createAstro, r as renderTemplate, b as renderComponent, d as renderHead, e as addAttribute } from '../chunks/astro/server_CDjB31Lh.mjs';
import 'kleur/colors';
import { $ as $$HeaderGrisha } from '../chunks/HeaderGrisha_5DuKFRQu.mjs';
/* empty css                                 */
export { renderers } from '../renderers.mjs';

var __freeze = Object.freeze;
var __defProp = Object.defineProperty;
var __template = (cooked, raw) => __freeze(__defProp(cooked, "raw", { value: __freeze(raw || cooked.slice()) }));
var _a;
const $$Astro = createAstro();
const $$Index = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro, $$props, $$slots);
  Astro2.self = $$Index;
  const isAuthenticated = Astro2.cookies.has("admin_session");
  if (!isAuthenticated && Astro2.request.url.includes("/admin") && !Astro2.request.url.includes("/admin/login")) {
    return Astro2.redirect("/admin/login");
  }
  return renderTemplate(_a || (_a = __template(['<html lang="en" data-astro-cid-u2h3djql> <head><meta charset="utf-8"><link rel="icon" type="image/svg+xml" href="/favicon.svg"><meta name="viewport" content="width=device-width"><meta name="generator"', "><title>Rifa Grisha - Panel de Administraci\xF3n</title>", "</head> <body data-astro-cid-u2h3djql> ", ' <main data-astro-cid-u2h3djql> <button id="logout-button" class="logout-button" data-astro-cid-u2h3djql>Cerrar Sesi\xF3n</button> <h1 data-astro-cid-u2h3djql>Panel de Administraci\xF3n Rifa Grisha</h1> <section class="dashboard-section" data-astro-cid-u2h3djql> <h2 data-astro-cid-u2h3djql>Resumen de Registros</h2> <p data-astro-cid-u2h3djql>\nAqu\xED se mostrar\xE1 un resumen de los usuarios registrados y su\n                    estado.\n</p> <table class="data-table" data-astro-cid-u2h3djql> <thead data-astro-cid-u2h3djql> <tr data-astro-cid-u2h3djql> <th data-astro-cid-u2h3djql>ID</th> <th data-astro-cid-u2h3djql>Correo</th> <th data-astro-cid-u2h3djql>Estado</th> <th data-astro-cid-u2h3djql>N\xFAmeros Rifa</th> <th data-astro-cid-u2h3djql>Registro</th> <th data-astro-cid-u2h3djql>Acciones</th> </tr> </thead> <tbody id="user-list" data-astro-cid-u2h3djql> <!-- Los datos de los usuarios se cargar\xE1n aqu\xED --> </tbody> </table> </section> <section class="dashboard-section" data-astro-cid-u2h3djql> <h2 data-astro-cid-u2h3djql>Estad\xEDsticas R\xE1pidas</h2> <p data-astro-cid-u2h3djql>N\xFAmero total de registros, verificados, pagos, etc.</p> </section> </main> <script>\n            const userListBody = document.getElementById("user-list");\n\n            // Function to load users from API\n            async function loadUsers() {\n                try {\n                    const response = await fetch("/api/admin/users");\n                    if (!response.ok) {\n                        if (response.status === 401) {\n                            window.location.href = "/admin/login"; // Redirect to login if unauthorized\n                            return;\n                        }\n                        throw new Error(\n                            `HTTP error! status: ${response.status}`,\n                        );\n                    }\n                    const users = await response.json();\n\n                    userListBody.innerHTML = ""; // Clear existing rows\n\n                    users.forEach((user) => {\n                        const row = userListBody.insertRow();\n                        row.insertCell().textContent =\n                            user.id.substring(0, 8) + "..."; // Truncate ID\n                        row.insertCell().textContent = user.email;\n                        row.insertCell().textContent = user.status\n                            .replace(/_/g, " ")\n                            .toUpperCase(); // Format status\n                        row.insertCell().textContent =\n                            user.raffleNumbers.length > 0\n                                ? user.raffleNumbers.join(", ")\n                                : "N/A";\n                        row.insertCell().textContent = new Date(\n                            user.createdAt,\n                        ).toLocaleString();\n\n                        const actionsCell = row.insertCell();\n                        actionsCell.className = "action-buttons";\n\n                        // Confirm Payment Button\n                        const confirmButton = document.createElement("button");\n                        confirmButton.textContent = "Confirmar Pago";\n                        confirmButton.className = "confirm";\n                        confirmButton.addEventListener("click", () => {\n                            confirmPayment(user.id); // Call confirmPayment function\n                        });\n                        actionsCell.appendChild(confirmButton);\n\n                        // Send Raffle Link Button\n                        const sendRaffleLinkButton =\n                            document.createElement("button");\n                        sendRaffleLinkButton.textContent = "Enviar Rifas";\n                        sendRaffleLinkButton.className = "send";\n                        sendRaffleLinkButton.dataset.userId = user.id;\n                        sendRaffleLinkButton.addEventListener(\n                            "click",\n                            async () => {\n                                const cantidadRifas = prompt(\n                                    "Ingresa la cantidad de rifas a enviar:",\n                                    "2",\n                                );\n                                if (\n                                    cantidadRifas !== null &&\n                                    !isNaN(Number(cantidadRifas)) &&\n                                    Number(cantidadRifas) > 0 &&\n                                    Number(cantidadRifas) % 2 === 0\n                                ) {\n                                    sendRaffleNumbers(user.id, cantidadRifas);\n                                } else {\n                                    alert(\n                                        "Por favor, ingresa una cantidad v\xE1lida de rifas (m\xFAltiplo de 2).",\n                                    );\n                                }\n\n                                // Future: Generate and send unique link\n                            },\n                        );\n                        actionsCell.appendChild(sendRaffleLinkButton);\n                    });\n                } catch (error) {\n                    console.error("Error al cargar usuarios:", error);\n                    userListBody.innerHTML =\n                        \'<tr><td colspan="6">Error al cargar usuarios. Por favor, aseg\xFArate de haber iniciado sesi\xF3n.</td></tr>\';\n                }\n            }\n\n            // Function to confirm payment\n            async function confirmPayment(userId) {\n                try {\n                    const response = await fetch("/api/admin/confirm-payment", {\n                        method: "POST",\n                        headers: {\n                            "Content-Type": "application/json",\n                        },\n                        body: JSON.stringify({ userId }),\n                    });\n\n                    const data = await response.json();\n\n                    if (response.ok) {\n                        alert("Pago confirmado con \xE9xito.");\n                        // Refresh user list after confirming payment.\n                        loadUsers();\n                    } else {\n                        alert("Error al confirmar el pago.");\n                    }\n                } catch (error) {\n                    console.error("Error confirming payment:", error);\n                    alert("Ocurri\xF3 un error al confirmar el pago.");\n                }\n            }\n\n            // Function to send raffle numbers\n            async function sendRaffleNumbers(userId, cantidadRifas) {\n                try {\n                    const response = await fetch("/api/admin/send-raffles", {\n                        method: "POST",\n                        headers: {\n                            "Content-Type": "application/json",\n                        },\n                        body: JSON.stringify({ userId, cantidadRifas }), // Include cantidadRifas\n                    });\n\n                    const data = await response.json();\n\n                    if (response.ok) {\n                        alert("N\xFAmeros de rifa enviados con \xE9xito.");\n                        // Puedes agregar l\xF3gica para actualizar el estado del usuario o mostrar un mensaje.\n                    } else {\n                        alert("Error al enviar los n\xFAmeros de rifa.");\n                    }\n                } catch (error) {\n                    console.error(\n                        "Error al enviar los n\xFAmeros de rifa:",\n                        error,\n                    );\n                    alert("Ocurri\xF3 un error al enviar los n\xFAmeros de rifa.");\n                }\n            }\n\n            // Logout function\n            document\n                .getElementById("logout-button")\n                .addEventListener("click", async () => {\n                    try {\n                        const response = await fetch("/api/admin/logout", {\n                            method: "POST",\n                            headers: {\n                                "Content-Type": "application/json",\n                            },\n                        });\n\n                        const data = await response.json();\n\n                        if (response.ok && data.success) {\n                            alert(data.message || "Sesi\xF3n cerrada.");\n                            window.location.href = "/admin/login";\n                        } else {\n                            alert(data.message || "Error al cerrar sesi\xF3n.");\n                        }\n                    } catch (error) {\n                        console.error(\n                            "Error al intentar cerrar sesi\xF3n:",\n                            error,\n                        );\n                        alert("Ocurri\xF3 un error de conexi\xF3n al cerrar sesi\xF3n.");\n                    }\n                });\n\n            // Load users on page load\n            document.addEventListener("DOMContentLoaded", loadUsers);\n        <\/script> </body> </html>'], ['<html lang="en" data-astro-cid-u2h3djql> <head><meta charset="utf-8"><link rel="icon" type="image/svg+xml" href="/favicon.svg"><meta name="viewport" content="width=device-width"><meta name="generator"', "><title>Rifa Grisha - Panel de Administraci\xF3n</title>", "</head> <body data-astro-cid-u2h3djql> ", ' <main data-astro-cid-u2h3djql> <button id="logout-button" class="logout-button" data-astro-cid-u2h3djql>Cerrar Sesi\xF3n</button> <h1 data-astro-cid-u2h3djql>Panel de Administraci\xF3n Rifa Grisha</h1> <section class="dashboard-section" data-astro-cid-u2h3djql> <h2 data-astro-cid-u2h3djql>Resumen de Registros</h2> <p data-astro-cid-u2h3djql>\nAqu\xED se mostrar\xE1 un resumen de los usuarios registrados y su\n                    estado.\n</p> <table class="data-table" data-astro-cid-u2h3djql> <thead data-astro-cid-u2h3djql> <tr data-astro-cid-u2h3djql> <th data-astro-cid-u2h3djql>ID</th> <th data-astro-cid-u2h3djql>Correo</th> <th data-astro-cid-u2h3djql>Estado</th> <th data-astro-cid-u2h3djql>N\xFAmeros Rifa</th> <th data-astro-cid-u2h3djql>Registro</th> <th data-astro-cid-u2h3djql>Acciones</th> </tr> </thead> <tbody id="user-list" data-astro-cid-u2h3djql> <!-- Los datos de los usuarios se cargar\xE1n aqu\xED --> </tbody> </table> </section> <section class="dashboard-section" data-astro-cid-u2h3djql> <h2 data-astro-cid-u2h3djql>Estad\xEDsticas R\xE1pidas</h2> <p data-astro-cid-u2h3djql>N\xFAmero total de registros, verificados, pagos, etc.</p> </section> </main> <script>\n            const userListBody = document.getElementById("user-list");\n\n            // Function to load users from API\n            async function loadUsers() {\n                try {\n                    const response = await fetch("/api/admin/users");\n                    if (!response.ok) {\n                        if (response.status === 401) {\n                            window.location.href = "/admin/login"; // Redirect to login if unauthorized\n                            return;\n                        }\n                        throw new Error(\n                            \\`HTTP error! status: \\${response.status}\\`,\n                        );\n                    }\n                    const users = await response.json();\n\n                    userListBody.innerHTML = ""; // Clear existing rows\n\n                    users.forEach((user) => {\n                        const row = userListBody.insertRow();\n                        row.insertCell().textContent =\n                            user.id.substring(0, 8) + "..."; // Truncate ID\n                        row.insertCell().textContent = user.email;\n                        row.insertCell().textContent = user.status\n                            .replace(/_/g, " ")\n                            .toUpperCase(); // Format status\n                        row.insertCell().textContent =\n                            user.raffleNumbers.length > 0\n                                ? user.raffleNumbers.join(", ")\n                                : "N/A";\n                        row.insertCell().textContent = new Date(\n                            user.createdAt,\n                        ).toLocaleString();\n\n                        const actionsCell = row.insertCell();\n                        actionsCell.className = "action-buttons";\n\n                        // Confirm Payment Button\n                        const confirmButton = document.createElement("button");\n                        confirmButton.textContent = "Confirmar Pago";\n                        confirmButton.className = "confirm";\n                        confirmButton.addEventListener("click", () => {\n                            confirmPayment(user.id); // Call confirmPayment function\n                        });\n                        actionsCell.appendChild(confirmButton);\n\n                        // Send Raffle Link Button\n                        const sendRaffleLinkButton =\n                            document.createElement("button");\n                        sendRaffleLinkButton.textContent = "Enviar Rifas";\n                        sendRaffleLinkButton.className = "send";\n                        sendRaffleLinkButton.dataset.userId = user.id;\n                        sendRaffleLinkButton.addEventListener(\n                            "click",\n                            async () => {\n                                const cantidadRifas = prompt(\n                                    "Ingresa la cantidad de rifas a enviar:",\n                                    "2",\n                                );\n                                if (\n                                    cantidadRifas !== null &&\n                                    !isNaN(Number(cantidadRifas)) &&\n                                    Number(cantidadRifas) > 0 &&\n                                    Number(cantidadRifas) % 2 === 0\n                                ) {\n                                    sendRaffleNumbers(user.id, cantidadRifas);\n                                } else {\n                                    alert(\n                                        "Por favor, ingresa una cantidad v\xE1lida de rifas (m\xFAltiplo de 2).",\n                                    );\n                                }\n\n                                // Future: Generate and send unique link\n                            },\n                        );\n                        actionsCell.appendChild(sendRaffleLinkButton);\n                    });\n                } catch (error) {\n                    console.error("Error al cargar usuarios:", error);\n                    userListBody.innerHTML =\n                        \'<tr><td colspan="6">Error al cargar usuarios. Por favor, aseg\xFArate de haber iniciado sesi\xF3n.</td></tr>\';\n                }\n            }\n\n            // Function to confirm payment\n            async function confirmPayment(userId) {\n                try {\n                    const response = await fetch("/api/admin/confirm-payment", {\n                        method: "POST",\n                        headers: {\n                            "Content-Type": "application/json",\n                        },\n                        body: JSON.stringify({ userId }),\n                    });\n\n                    const data = await response.json();\n\n                    if (response.ok) {\n                        alert("Pago confirmado con \xE9xito.");\n                        // Refresh user list after confirming payment.\n                        loadUsers();\n                    } else {\n                        alert("Error al confirmar el pago.");\n                    }\n                } catch (error) {\n                    console.error("Error confirming payment:", error);\n                    alert("Ocurri\xF3 un error al confirmar el pago.");\n                }\n            }\n\n            // Function to send raffle numbers\n            async function sendRaffleNumbers(userId, cantidadRifas) {\n                try {\n                    const response = await fetch("/api/admin/send-raffles", {\n                        method: "POST",\n                        headers: {\n                            "Content-Type": "application/json",\n                        },\n                        body: JSON.stringify({ userId, cantidadRifas }), // Include cantidadRifas\n                    });\n\n                    const data = await response.json();\n\n                    if (response.ok) {\n                        alert("N\xFAmeros de rifa enviados con \xE9xito.");\n                        // Puedes agregar l\xF3gica para actualizar el estado del usuario o mostrar un mensaje.\n                    } else {\n                        alert("Error al enviar los n\xFAmeros de rifa.");\n                    }\n                } catch (error) {\n                    console.error(\n                        "Error al enviar los n\xFAmeros de rifa:",\n                        error,\n                    );\n                    alert("Ocurri\xF3 un error al enviar los n\xFAmeros de rifa.");\n                }\n            }\n\n            // Logout function\n            document\n                .getElementById("logout-button")\n                .addEventListener("click", async () => {\n                    try {\n                        const response = await fetch("/api/admin/logout", {\n                            method: "POST",\n                            headers: {\n                                "Content-Type": "application/json",\n                            },\n                        });\n\n                        const data = await response.json();\n\n                        if (response.ok && data.success) {\n                            alert(data.message || "Sesi\xF3n cerrada.");\n                            window.location.href = "/admin/login";\n                        } else {\n                            alert(data.message || "Error al cerrar sesi\xF3n.");\n                        }\n                    } catch (error) {\n                        console.error(\n                            "Error al intentar cerrar sesi\xF3n:",\n                            error,\n                        );\n                        alert("Ocurri\xF3 un error de conexi\xF3n al cerrar sesi\xF3n.");\n                    }\n                });\n\n            // Load users on page load\n            document.addEventListener("DOMContentLoaded", loadUsers);\n        <\/script> </body> </html>'])), addAttribute(Astro2.generator, "content"), renderHead(), renderComponent($$result, "HeaderGrisha", $$HeaderGrisha, { "data-astro-cid-u2h3djql": true }));
}, "/home/jimp/develop/astro/rifa_grisha/src/pages/admin/index.astro", void 0);

const $$file = "/home/jimp/develop/astro/rifa_grisha/src/pages/admin/index.astro";
const $$url = "/admin";

const _page = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
    __proto__: null,
    default: $$Index,
    file: $$file,
    url: $$url
}, Symbol.toStringTag, { value: 'Module' }));

const page = () => _page;

export { page };
