import { c as createComponent, a as createAstro, r as renderTemplate, b as renderComponent, d as renderHead, e as addAttribute } from '../chunks/astro/server_CDjB31Lh.mjs';
import 'kleur/colors';
import { $ as $$HeaderGrisha } from '../chunks/HeaderGrisha_5DuKFRQu.mjs';
/* empty css                                        */
export { renderers } from '../renderers.mjs';

var __freeze = Object.freeze;
var __defProp = Object.defineProperty;
var __template = (cooked, raw) => __freeze(__defProp(cooked, "raw", { value: __freeze(raw || cooked.slice()) }));
var _a;
const $$Astro = createAstro();
const $$VerifyEmail = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro, $$props, $$slots);
  Astro2.self = $$VerifyEmail;
  return renderTemplate(_a || (_a = __template(['<html lang="en" data-astro-cid-lxcpjv43> <head><meta charset="utf-8"><link rel="icon" type="image/svg+xml" href="/favicon.svg"><meta name="viewport" content="width=device-width"><meta name="generator"', "><title>Rifa Grisha - Verificar Correo</title>", "</head> <body data-astro-cid-lxcpjv43> ", ' <main data-astro-cid-lxcpjv43> <h1 data-astro-cid-lxcpjv43>Verifica tu Correo Electr\xF3nico</h1> <p id="initial-message" data-astro-cid-lxcpjv43>Estamos verificando tu correo...</p> <form id="verification-form" style="display:none;" data-astro-cid-lxcpjv43> <label for="code" data-astro-cid-lxcpjv43>C\xF3digo de Verificaci\xF3n:</label> <input type="text" id="code" name="code" required minlength="6" maxlength="6" pattern="[0-9]{6}" placeholder="Ej: 123456" data-astro-cid-lxcpjv43> <button type="submit" data-astro-cid-lxcpjv43>Verificar C\xF3digo Manualmente</button> </form> <div id="form-message" class="message" style="display:none;" data-astro-cid-lxcpjv43></div> <p id="manual-prompt" class="small-text" style="display:none;" data-astro-cid-lxcpjv43>\nSi el proceso autom\xE1tico no funciona, ingresa el c\xF3digo\n                manualmente.\n</p> </main> <script>\n            function getUrlParameter(name) {\n                name = name.replace(/[\\[]/, "\\\\[").replace(/[\\]]/, "\\\\]");\n                var regex = new RegExp("[\\\\?&]" + name + "=([^&#]*)");\n                var results = regex.exec(location.search);\n                return results === null\n                    ? ""\n                    : decodeURIComponent(results[1].replace(/\\+/g, " "));\n            }\n\n            async function verifyEmail(email, code) {\n                const formMessage = document.getElementById("form-message");\n                formMessage.style.display = "none";\n                formMessage.classList.remove("success", "error");\n                formMessage.textContent = "";\n\n                try {\n                    const response = await fetch("/api/verify-email", {\n                        method: "POST",\n                        headers: {\n                            "Content-Type": "application/json",\n                        },\n                        body: JSON.stringify({ email, code }),\n                    });\n\n                    const data = await response.json();\n\n                    if (response.ok) {\n                        formMessage.textContent =\n                            data.message || "C\xF3digo verificado con \xE9xito.";\n                        formMessage.className = "message success";\n\n                        // Redirigir al usuario al siguiente paso (ej. instrucciones de pago)\n                        if (data.redirectTo) {\n                            setTimeout(() => {\n                                window.location.href = data.redirectTo;\n                            }, 1500); // Peque\xF1o retraso\n                        } else {\n                            // Fallback si no hay redirecci\xF3n (inesperado, pero seguro)\n                            formMessage.textContent +=\n                                " Por favor, dir\xEDgete a la p\xE1gina de inicio.";\n                            setTimeout(() => {\n                                window.location.href = "/";\n                            }, 2000);\n                        }\n                    } else {\n                        formMessage.textContent =\n                            data.message ||\n                            "Hubo un error al verificar el c\xF3digo.";\n                        formMessage.className = "message error";\n                    }\n                } catch (error) {\n                    console.error(\n                        "Error al enviar el formulario de verificaci\xF3n:",\n                        error,\n                    );\n                    formMessage.textContent =\n                        "Ocurri\xF3 un error de conexi\xF3n. Int\xE9ntalo de nuevo m\xE1s tarde.";\n                    formMessage.className = "message error";\n                } finally {\n                    formMessage.style.display = "block";\n                }\n            }\n\n            document.addEventListener("DOMContentLoaded", async () => {\n                const urlEmail = getUrlParameter("email");\n                const urlCode = getUrlParameter("code");\n                const initialMessage =\n                    document.getElementById("initial-message");\n                const verificationForm =\n                    document.getElementById("verification-form");\n                const manualPrompt = document.getElementById("manual-prompt");\n\n                if (urlEmail && urlCode) {\n                    initialMessage.textContent = `Verificando ${urlEmail}...`;\n                    await verifyEmail(urlEmail, urlCode);\n                    // Despu\xE9s de la verificaci\xF3n, el mensaje y la redirecci\xF3n se manejar\xE1n dentro de verifyEmail()\n                } else {\n                    // Mostrar formulario manual si no hay URL params\n                    initialMessage.textContent =\n                        "Por favor, ingresa el c\xF3digo de verificaci\xF3n que recibiste por correo.";\n                    verificationForm.style.display = "flex";\n                    manualPrompt.style.display = "block";\n                }\n\n                // Configurar el listener del formulario manual (para reintentos o entrada manual)\n                verificationForm.addEventListener("submit", async (event) => {\n                    event.preventDefault();\n                    const codeInput = document.getElementById("code");\n                    const verificationCode = codeInput.value;\n\n                    // Si el email no est\xE1 en la URL, se espera que el usuario lo tenga del correo\n                    // En un sistema real, quiz\xE1s pedir\xEDas el email tambi\xE9n en el formulario manual\n                    // Por ahora, si no hay email en URL y no lo hemos pedido, re-redirigir\n                    if (!urlEmail) {\n                        document.getElementById("form-message").textContent =\n                            "Error: No se pudo identificar tu correo. Por favor, vuelve a la p\xE1gina principal para registrarte.";\n                        document.getElementById("form-message").className =\n                            "message error";\n                        document.getElementById("form-message").style.display =\n                            "block";\n                        return;\n                    }\n\n                    await verifyEmail(urlEmail, verificationCode);\n                });\n            });\n        <\/script> </body> </html>'], ['<html lang="en" data-astro-cid-lxcpjv43> <head><meta charset="utf-8"><link rel="icon" type="image/svg+xml" href="/favicon.svg"><meta name="viewport" content="width=device-width"><meta name="generator"', "><title>Rifa Grisha - Verificar Correo</title>", "</head> <body data-astro-cid-lxcpjv43> ", ' <main data-astro-cid-lxcpjv43> <h1 data-astro-cid-lxcpjv43>Verifica tu Correo Electr\xF3nico</h1> <p id="initial-message" data-astro-cid-lxcpjv43>Estamos verificando tu correo...</p> <form id="verification-form" style="display:none;" data-astro-cid-lxcpjv43> <label for="code" data-astro-cid-lxcpjv43>C\xF3digo de Verificaci\xF3n:</label> <input type="text" id="code" name="code" required minlength="6" maxlength="6" pattern="[0-9]{6}" placeholder="Ej: 123456" data-astro-cid-lxcpjv43> <button type="submit" data-astro-cid-lxcpjv43>Verificar C\xF3digo Manualmente</button> </form> <div id="form-message" class="message" style="display:none;" data-astro-cid-lxcpjv43></div> <p id="manual-prompt" class="small-text" style="display:none;" data-astro-cid-lxcpjv43>\nSi el proceso autom\xE1tico no funciona, ingresa el c\xF3digo\n                manualmente.\n</p> </main> <script>\n            function getUrlParameter(name) {\n                name = name.replace(/[\\\\[]/, "\\\\\\\\[").replace(/[\\\\]]/, "\\\\\\\\]");\n                var regex = new RegExp("[\\\\\\\\?&]" + name + "=([^&#]*)");\n                var results = regex.exec(location.search);\n                return results === null\n                    ? ""\n                    : decodeURIComponent(results[1].replace(/\\\\+/g, " "));\n            }\n\n            async function verifyEmail(email, code) {\n                const formMessage = document.getElementById("form-message");\n                formMessage.style.display = "none";\n                formMessage.classList.remove("success", "error");\n                formMessage.textContent = "";\n\n                try {\n                    const response = await fetch("/api/verify-email", {\n                        method: "POST",\n                        headers: {\n                            "Content-Type": "application/json",\n                        },\n                        body: JSON.stringify({ email, code }),\n                    });\n\n                    const data = await response.json();\n\n                    if (response.ok) {\n                        formMessage.textContent =\n                            data.message || "C\xF3digo verificado con \xE9xito.";\n                        formMessage.className = "message success";\n\n                        // Redirigir al usuario al siguiente paso (ej. instrucciones de pago)\n                        if (data.redirectTo) {\n                            setTimeout(() => {\n                                window.location.href = data.redirectTo;\n                            }, 1500); // Peque\xF1o retraso\n                        } else {\n                            // Fallback si no hay redirecci\xF3n (inesperado, pero seguro)\n                            formMessage.textContent +=\n                                " Por favor, dir\xEDgete a la p\xE1gina de inicio.";\n                            setTimeout(() => {\n                                window.location.href = "/";\n                            }, 2000);\n                        }\n                    } else {\n                        formMessage.textContent =\n                            data.message ||\n                            "Hubo un error al verificar el c\xF3digo.";\n                        formMessage.className = "message error";\n                    }\n                } catch (error) {\n                    console.error(\n                        "Error al enviar el formulario de verificaci\xF3n:",\n                        error,\n                    );\n                    formMessage.textContent =\n                        "Ocurri\xF3 un error de conexi\xF3n. Int\xE9ntalo de nuevo m\xE1s tarde.";\n                    formMessage.className = "message error";\n                } finally {\n                    formMessage.style.display = "block";\n                }\n            }\n\n            document.addEventListener("DOMContentLoaded", async () => {\n                const urlEmail = getUrlParameter("email");\n                const urlCode = getUrlParameter("code");\n                const initialMessage =\n                    document.getElementById("initial-message");\n                const verificationForm =\n                    document.getElementById("verification-form");\n                const manualPrompt = document.getElementById("manual-prompt");\n\n                if (urlEmail && urlCode) {\n                    initialMessage.textContent = \\`Verificando \\${urlEmail}...\\`;\n                    await verifyEmail(urlEmail, urlCode);\n                    // Despu\xE9s de la verificaci\xF3n, el mensaje y la redirecci\xF3n se manejar\xE1n dentro de verifyEmail()\n                } else {\n                    // Mostrar formulario manual si no hay URL params\n                    initialMessage.textContent =\n                        "Por favor, ingresa el c\xF3digo de verificaci\xF3n que recibiste por correo.";\n                    verificationForm.style.display = "flex";\n                    manualPrompt.style.display = "block";\n                }\n\n                // Configurar el listener del formulario manual (para reintentos o entrada manual)\n                verificationForm.addEventListener("submit", async (event) => {\n                    event.preventDefault();\n                    const codeInput = document.getElementById("code");\n                    const verificationCode = codeInput.value;\n\n                    // Si el email no est\xE1 en la URL, se espera que el usuario lo tenga del correo\n                    // En un sistema real, quiz\xE1s pedir\xEDas el email tambi\xE9n en el formulario manual\n                    // Por ahora, si no hay email en URL y no lo hemos pedido, re-redirigir\n                    if (!urlEmail) {\n                        document.getElementById("form-message").textContent =\n                            "Error: No se pudo identificar tu correo. Por favor, vuelve a la p\xE1gina principal para registrarte.";\n                        document.getElementById("form-message").className =\n                            "message error";\n                        document.getElementById("form-message").style.display =\n                            "block";\n                        return;\n                    }\n\n                    await verifyEmail(urlEmail, verificationCode);\n                });\n            });\n        <\/script> </body> </html>'])), addAttribute(Astro2.generator, "content"), renderHead(), renderComponent($$result, "HeaderGrisha", $$HeaderGrisha, { "data-astro-cid-lxcpjv43": true }));
}, "/home/jimp/develop/astro/rifa_grisha/src/pages/verify-email.astro", void 0);

const $$file = "/home/jimp/develop/astro/rifa_grisha/src/pages/verify-email.astro";
const $$url = "/verify-email";

const _page = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
    __proto__: null,
    default: $$VerifyEmail,
    file: $$file,
    url: $$url
}, Symbol.toStringTag, { value: 'Module' }));

const page = () => _page;

export { page };
